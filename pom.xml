<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.xzb</groupId>    <!-- 项目源路径 -->
    <artifactId>comment</artifactId><!-- 项目名称 -->
    <packaging>war</packaging>      <!-- wed项目包名称 -->
    <version>0.0.1-SNAPSHOT</version><!-- 版本快照 -->
    <name>comment Maven Webapp</name>
    <url>http://maven.apache.org</url>
    <!-- 依赖集-->
    <dependencies>
        <!-- 依赖下载 单元测试框架
        https://blog.csdn.net/superxiaolong123/article/details/79700108-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <!--servlet服务器
        https://www.runoob.com/servlet/servlet-intro.html-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
        </dependency>
        <!--JSP 标准标签库(JSTL) 为JSP定制标签库和相关的项目提供的一个开源仓库，
        如TagLibraryValidator类，和对页面生成工具的扩展来支持标签库  -->
        <dependency>
            <groupId>taglibs</groupId>
            <artifactId>standard</artifactId>
            <version>1.1.2</version>
        </dependency>
        <!--spring-web是一个一站式的框架，是一个管理bean的容器。
        提供了表现du层（springmvc）到业务层（spring）再到zhi数据层的dao全套解决方案；
        spring的两大核心IOC(控制反转)和AOP(面向切面编程)更是给我们的程序解耦和代码的简介提供了支持。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>4.2.3.RELEASE</version>
        </dependency>
        <!--Spring-webMVC是基于Spring功能之上添加的Web框架，想用pring-webMVC必须先依赖pring-web，pring-webMVC仅给spring的表现层提供支持。  -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>4.2.3.RELEASE</version>
        </dependency>
        <!--Spring-tx模块负责在spring框架中实现事务管理功能。以aop切面的方式将事务注入到业务代码中,并实现不同类型的事务管理器。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>4.2.3.RELEASE</version>
        </dependency>
        <!--Spring框架针对数据库提供了JdbcTemplate 类，
        JdbcTemplate 是Spring 数据抽象层的基础，其他更高层次的抽象类都是构建在其基础之上，JdbcTemplate 是Spring JDBC的核心类。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>4.2.3.RELEASE</version>
        </dependency>
        <!--JSTL的JavaServer Pages Standard Tag Library，中文全称是JSP标准标识库。
         JSTL标签是基于JSP页面的，这些标签可以插入在JSP代码中，本质上JSTL也是提前定义好的一组标签，
         这些标签封装了不同的功能，在页面上调用标签时，就等于调用了封装起来的功能。JSTL的目标是简化JSP页面的设计。
         https://www.runoob.com/jsp/jsp-jstl.html-->
        <dependency>
            <groupId>jstl</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
        <!-- MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。
        MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。
        MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)
        映射成数据库中的记录。 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.3.0</version>
        </dependency>
        <!-- JodaTime 提供了一组Java类包用于处理包括ISO8601标准在内的date和time。
        可以利用它把JDK Date和Calendar类完全替换掉，而且仍然能够提供很好的集成。
        https://blog.csdn.net/psh18513234633/article/details/79408096
        -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.3</version>
        </dependency>
        <!--C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。
        目前使用它的开源项目有Hibernate、Spring等
        https://blog.csdn.net/qq_42035966/article/details/81332343-->
        <dependency>
            <groupId>c3p0</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.1.2</version>
        </dependency>
        <!--将 MyBatis 代码无缝地整合到 Spring 中。它将允许 MyBatis 参与到 Spring 的事务管理之中，
        创建映射器 mapper 和 SqlSession 并注入到 bean 中，以及将 Mybatis 的异常转换为 Spring 的 DataAccessException。
        最终，可以做到应用代码不依赖于 MyBatis，Spring 或 MyBatis-Spring。  -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.3.1</version>
        </dependency>
        <!--Jackson 是一个能够将java对象序列化为JSON字符串,也能够将JSON字符串反序列化为java对象的框架。数据处理和绑定  -->
        <!--https://blog.csdn.net/u011499747/article/details/78762007-->

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.3.3</version>
        </dependency>
        <!--jackson的数据绑定  -->
        <!--三个jackson包，还有一个jackson-annotations  jackson注解 -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.3.3</version>
        </dependency>
        <!-- mysql-java连接库 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.15</version><!-- 5.1.25 --><!-- 8.0.15 -->
        </dependency>
        <!-- FileUpload包可以很容易地添加强大的，高性能，文件上传到你的Servlet的Web应用程序的能力。 -->
        <!-- https://www.cnblogs.com/jimisun/p/9419269.html-->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.3.1</version>
        </dependency>
        <!-- Common IO 是一个工具库，用来帮助开发IO功能， 它包括6个主要部分
            Utility classes – 工具类，包括一些静态方法来执行常用任务
            Input – 输入，InputStream 和 Reader 实现
            Output – 输出，OutputStream 和 Writer 实现
            Filters – 过滤器，多种文件过滤器实现(定义了 IOFileFilter接口,同时继承了 FileFilter 和 FilenameFilter 接口)
            Comparators – 比较器，用于文件比较的多种java.util.Comparatot实现
            File Monitor–文件监控
            https://blog.csdn.net/backbug/article/details/99572931
         -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.4</version>
        </dependency>
        <!--Simple Logging Facade for Java，为java提供的简单日志Facade。Facade门面，更底层一点说就是接口。
        它允许用户以自己的喜好，在工程中通过slf4j接入不同的日志系统。
        https://www.cnblogs.com/lujiango/p/8573411.html-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.21</version>
        </dependency>
        <!--可以在logback和其他日志框架（如log4j或java.util.logging（JUL））之间来回切换。
          logback-access模块​​与Servlet容器（如Tomcat和Jetty）集成，以提供HTTP访问日志功能。-->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.1.7</version>
        </dependency>
        <!--logback-core模块为其他两个模块奠定了基础。  -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>1.1.7</version>
        </dependency>
    </dependencies>
    <build>
        <finalName>comment</finalName>
    </build>
</project>
